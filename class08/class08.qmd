---
title: "Class 8: Breast cancer mini project"
author: "Canbin Cai (A18087473)"
format: pdf
toc: true
---

## Background

This mini-project explores unsupervised learning techniques applied to the Wisconsin Breast Cancer Diagnostic Data Set, which contains measurements of human breast mass cell nuclei. The project guides the user through exploratory data analysis, performing and interpreting Principal Component Analysis (PCA) to reduce the dimensionality of the data while retaining variance, and applying hierarchical clustering with different linkage methods. The ultimate goal is to combine PCA and clustering to better separate benign and malignant cell samples, evaluate the result using metrics like sensitivity and specificity, and finally demonstrate how to predict the classification of new samples using the developed PCA model.


## Data import

Our data come from the U. of Wiscosin Medical Center.

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names=1)
```

> Q1. How many patients/samples are in this dataset? 

```{r}
nrow(wisc.df)
```


> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```

```{r}
sum(wisc.df$diagnosis == "M")
```


> Q3. How many variables/features in the data are suffixed with _mean?

```{r}
colnames(wisc.df)
```

```{r}
length( grep("mean", colnames(wisc.df), value = T) )
```

There is a diagnosis column that is the clinician consenus that I want to exclude from any further analysis. We will come back later and compare our results to this diagnosis. 

```{r}
diagnose <- as.factor( wisc.df$diagnosis ) 
head(diagnose) 
```

Now we can remove it from the `wisc.df` 

```{r}
wisc.data <- wisc.df[,-1]
```


## Clustering

Let's try a `hclust()`

```{r}
hc <- hclust( dist(wisc.data))
plot(hc)
```

We can extract clusters from this rather poor dendrogram/tree with the `cutree()`

```{r}
grps <- cutree(hc, k=2)
```

> How many individuals in each cluster?

```{r}
table(grps)
```

```{r}
table(diagnose)
```

We can generate a cross-table that compares our cluster `grps` vector without `diagnosis` vector values **(in my case, it's `diagnose`)**

```{r}
table(diagnose, grps)
```


## Principal Component Analysis 

### The importance of data scaling  

The main function for PCA in "base" R is `prcomp()` it has a dafault input parameter of `scale=FALSE`. 


```{r}
#prcomp()
head(mtcars)
```

We could do a PCA of this data as is and it could be mis-leading...

```{r}
pc <- prcomp(mtcars)
biplot(pc)
```

Let's look at the mean values of each column and their standard deviation.

```{r}
colMeans(mtcars)
```

```{r}
apply(mtcars, 2, sd)
```

We can "scale" this data before PCA to get a much better represention and analysus of all the columns. 

```{r}
mtscale <- scale(mtcars)
```

```{r}
round( colMeans(mtscale) )
```

```{r}
apply(mtscale, 2, sd)
```

```{r}
pc.scale <- prcomp(mtscale)
```

We can look at the two main results figures from PCA - the "PC plot" (a.k.a. score plot, ordienation plot, or PC1 vs PC2 plot). The "loadings plot" - how the origional variables contribute to the new PCs. 

A loadings plot of the unscaled PCA results

```{r}
library(ggplot2)

ggplot(pc$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```

Loadings plot of the scaled data

```{r}
ggplot(pc.scale$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```

PC plot of scaled PCA results

```{r}
library(ggrepel)

ggplot(pc.scale$x) +
  aes(PC1, PC2, label=rownames(pc.scale$x)) +
  geom_point() +
  geom_text_repel()
```


```{r}
pc$rotation
```

> **Key point**: In general we will set`scale=TRUE` when we do PCA. This is not the default but probably should be...


We can check the SD and mean of the different columns in `wisc.data` to see if we need to scale - hint: we do!


### PCA of wisc.data


```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
```

To see how well PCA is doing here in terms capturing the variance (or spread) in the data we can use the `summary()` function. 

```{r}
summary(wisc.pr)
```

Let's make the main PC1 vs PC2 

```{r}
ggplot(wisc.pr$x) +
  aes(PC1, PC2, col=diagnose) +
  geom_point() +
  xlab("PC1 (44.3%)") +
  ylab("PC2 (19%)")
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

```{r}
summary(wisc.pr)
```
44.27% is captured by PC1.  

>Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 PCs 

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why? 

```{r}
biplot(wisc.pr)
```

This biplot is very hard to understand, because it's too much going on and hard to read, and we're unable to see the trends.   

Generate a standard scatter plot for PC1 and PC2:
```{r}
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x, col = diagnose , 
     xlab = "PC1", ylab = "PC2")
```


> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots? 

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[, c(1,3) ], col = diagnose, 
     xlab = "PC1", ylab = "PC3")
```
The first plot (PC1 vs PC2) may better distinguish the malignant samples (red dots) from the benign samples (black dots), with the second plot (PC1 vs PC3) showing more overlapping. 


> Q9. For the first principal component, what is the component of the loading vector (i.e. `wisc.pr$rotation[,1]`) for the feature `concave.points_mean`? 

```{r}
PC1 <- wisc.pr$rotation[,1]
concave_point <- PC1["concave.points_mean"]
print(concave_point)
```


> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?   

```{r}
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

```{r}
var <- cumsum(wisc.pr$sdev^2) / sum(wisc.pr$sdev^2)
var >= 0.80
```


> Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```

```{r}
data.dist <- dist(data.scaled)
wisc.hclust <- hclust(data.dist, method = "complete")
```

```{r}
plot(wisc.hclust)
abline(wisc.hclust, col="red", lty=2)
```

> Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10? 

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k = 4)
table(wisc.hclust.clusters, diagnose)
```
```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k = 2)
table(wisc.hclust.clusters, diagnose)
```

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k = 10)
table(wisc.hclust.clusters, diagnose)
```


> Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning. 

I think the `cutree ()` function will probably give better data that's slightly easier to read. I'm still able to read the number of malignant samples and benign samples in the table above. Overall, I prefer plots over tables, which I think will be much easier to read and analyze.           



### 5. Combining Methods


We can take our PCA results and use them as a basis set for other analysis such as clustering. 

### Clustering on PCA results

```{r}
wisc.pr.hclust <- hclust( dist( wisc.pr$x[,1:2]), method="ward.D2" )
plot(wisc.pr.hclust)
```


We can "cut" this tree to yield our clusters (groups):

```{r}
pc.grps <- cutree(wisc.pr.hclust, k=2)
table(pc.grps)
```

> How do my cluster grps compare to the expert diagnosis?  

```{r}
table(diagnose, pc.grps)
```
> Q15. How well does the newly created model with four clusters separate out the two diagnoses? 

It's still not really clear on understanding the numbers of malignant samples and benign samples.   


```{r}
table(diagnose)
```


> Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the `table()` function to compare the output of each model (`wisc.km$cluster` and `wisc.hclust.clusters`) with the vector containing the actual diagnoses.

```{r}
wisc.km <- kmeans(wisc.data, centers = 2)
table(wisc.km$cluster, diagnose)
```

```{r}
wisc.hclust <- hclust(dist(wisc.data))
wisc.hclust.clusters <- cutree(wisc.hclust, k=4)
table(wisc.hclust.clusters, diagnose)
```

They did really badly. We do much better after PCA - the new PCA variables (what we called a basis set) give us much better separation of M and B. 


## 7. Prediction

We can use our PCA model for the analysis of new "unseen" data. In this case from U. Mich. 

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

> Q18. Which of these new patients should we prioritize for follow up based on your results?

```{r}
plot(wisc.pr$x[,1:2], col = diagnose)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

Based on this plot, (1) benign samples (black dots) are more clustered and stable, and (2) the malignant samples (red dots) are more spread out, so they are more variable/different. Therefore, (2) should be prioritized for follow-up based on the result.















